<?php

/**
 * This is the model base class for the table "github_payload".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "GithubPayload".
 *
 * Columns in table "github_payload" available as properties of the model,
 * followed by relations of table "github_payload" available as properties of the model.
 *
 * @property string $id_github_payload
 * @property string $fk_github_repository
 * @property string $fk_github_payload_user_pusher
 * @property string $after
 * @property string $before
 * @property string $compare
 * @property integer $created
 * @property integer $deleted
 * @property integer $forced
 * @property string $ref
 *
 * @property GithubRepository $fkGithubRepository
 * @property GithubUser $fkGithubPayloadUserPusher
 * @property GithubPayloadCommit[] $githubPayloadCommits
 */
abstract class BaseGithubPayload extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'github_payload';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'GithubPayload|GithubPayloads', $n);
	}

	public static function representingColumn() {
		return 'after';
	}

	public function rules() {
		return array(
			array('fk_github_repository', 'required'),
			array('created, deleted, forced', 'numerical', 'integerOnly'=>true),
			array('fk_github_repository, fk_github_payload_user_pusher', 'length', 'max'=>11),
			array('after, before, compare, ref', 'length', 'max'=>255),
			array('fk_github_payload_user_pusher, after, before, compare, created, deleted, forced, ref', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id_github_payload, fk_github_repository, fk_github_payload_user_pusher, after, before, compare, created, deleted, forced, ref', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'fkGithubRepository' => array(self::BELONGS_TO, 'GithubRepository', 'fk_github_repository'),
			'fkGithubPayloadUserPusher' => array(self::BELONGS_TO, 'GithubUser', 'fk_github_payload_user_pusher'),
			'githubPayloadCommits' => array(self::HAS_MANY, 'GithubPayloadCommit', 'fk_github_payload'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id_github_payload' => Yii::t('app', 'Id Github Payload'),
			'fk_github_repository' => null,
			'fk_github_payload_user_pusher' => null,
			'after' => Yii::t('app', 'After'),
			'before' => Yii::t('app', 'Before'),
			'compare' => Yii::t('app', 'Compare'),
			'created' => Yii::t('app', 'Created'),
			'deleted' => Yii::t('app', 'Deleted'),
			'forced' => Yii::t('app', 'Forced'),
			'ref' => Yii::t('app', 'Ref'),
			'fkGithubRepository' => null,
			'fkGithubPayloadUserPusher' => null,
			'githubPayloadCommits' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id_github_payload', $this->id_github_payload, true);
		$criteria->compare('fk_github_repository', $this->fk_github_repository);
		$criteria->compare('fk_github_payload_user_pusher', $this->fk_github_payload_user_pusher);
		$criteria->compare('after', $this->after, true);
		$criteria->compare('before', $this->before, true);
		$criteria->compare('compare', $this->compare, true);
		$criteria->compare('created', $this->created);
		$criteria->compare('deleted', $this->deleted);
		$criteria->compare('forced', $this->forced);
		$criteria->compare('ref', $this->ref, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}