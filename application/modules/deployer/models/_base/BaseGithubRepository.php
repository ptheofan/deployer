<?php

/**
 * This is the model base class for the table "github_repository".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "GithubRepository".
 *
 * Columns in table "github_repository" available as properties of the model,
 * followed by relations of table "github_repository" available as properties of the model.
 *
 * @property string $id_github_payload_repository
 * @property string $fk_github_user
 * @property string $created_at
 * @property string $description
 * @property integer $fork
 * @property integer $forks
 * @property integer $has_downloads
 * @property integer $has_issues
 * @property integer $has_wiki
 * @property string $homepage
 * @property string $github_id
 * @property string $language
 * @property string $master_branch
 * @property string $name
 * @property integer $open_issues
 * @property integer $private
 * @property string $pushed_at
 * @property integer $size
 * @property integer $stargazers
 * @property string $url
 * @property integer $watchers
 *
 * @property GithubPayload[] $githubPayloads
 * @property GithubUser $fkGithubUser
 */
abstract class BaseGithubRepository extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'github_repository';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'GithubRepository|GithubRepositories', $n);
	}

	public static function representingColumn() {
		return 'created_at';
	}

	public function rules() {
		return array(
			array('fk_github_user, github_id', 'required'),
			array('fork, forks, has_downloads, has_issues, has_wiki, open_issues, private, size, stargazers, watchers', 'numerical', 'integerOnly'=>true),
			array('fk_github_user, github_id', 'length', 'max'=>11),
			array('homepage, language, master_branch, name, url', 'length', 'max'=>255),
			array('created_at, description, pushed_at', 'safe'),
			array('created_at, description, fork, forks, has_downloads, has_issues, has_wiki, homepage, language, master_branch, name, open_issues, private, pushed_at, size, stargazers, url, watchers', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id_github_payload_repository, fk_github_user, created_at, description, fork, forks, has_downloads, has_issues, has_wiki, homepage, github_id, language, master_branch, name, open_issues, private, pushed_at, size, stargazers, url, watchers', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'githubPayloads' => array(self::HAS_MANY, 'GithubPayload', 'fk_github_repository'),
			'fkGithubUser' => array(self::BELONGS_TO, 'GithubUser', 'fk_github_user'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id_github_payload_repository' => Yii::t('app', 'Id Github Payload Repository'),
			'fk_github_user' => null,
			'created_at' => Yii::t('app', 'Created At'),
			'description' => Yii::t('app', 'Description'),
			'fork' => Yii::t('app', 'Fork'),
			'forks' => Yii::t('app', 'Forks'),
			'has_downloads' => Yii::t('app', 'Has Downloads'),
			'has_issues' => Yii::t('app', 'Has Issues'),
			'has_wiki' => Yii::t('app', 'Has Wiki'),
			'homepage' => Yii::t('app', 'Homepage'),
			'github_id' => Yii::t('app', 'Github'),
			'language' => Yii::t('app', 'Language'),
			'master_branch' => Yii::t('app', 'Master Branch'),
			'name' => Yii::t('app', 'Name'),
			'open_issues' => Yii::t('app', 'Open Issues'),
			'private' => Yii::t('app', 'Private'),
			'pushed_at' => Yii::t('app', 'Pushed At'),
			'size' => Yii::t('app', 'Size'),
			'stargazers' => Yii::t('app', 'Stargazers'),
			'url' => Yii::t('app', 'Url'),
			'watchers' => Yii::t('app', 'Watchers'),
			'githubPayloads' => null,
			'fkGithubUser' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id_github_payload_repository', $this->id_github_payload_repository, true);
		$criteria->compare('fk_github_user', $this->fk_github_user);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('fork', $this->fork);
		$criteria->compare('forks', $this->forks);
		$criteria->compare('has_downloads', $this->has_downloads);
		$criteria->compare('has_issues', $this->has_issues);
		$criteria->compare('has_wiki', $this->has_wiki);
		$criteria->compare('homepage', $this->homepage, true);
		$criteria->compare('github_id', $this->github_id, true);
		$criteria->compare('language', $this->language, true);
		$criteria->compare('master_branch', $this->master_branch, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('open_issues', $this->open_issues);
		$criteria->compare('private', $this->private);
		$criteria->compare('pushed_at', $this->pushed_at, true);
		$criteria->compare('size', $this->size);
		$criteria->compare('stargazers', $this->stargazers);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('watchers', $this->watchers);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}